#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Oct 13 11:19:47 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn puppeth --network pnet
match_max 100000
expect "What would you like to do? (default = stats)\r
 1. Show network stats\r
 2. Configure new genesis\r
 3. Track new remote server\r
 4. Deploy network components\r
> "
send -- "2"
send -- "\r"
expect "What would you like to do? (default = create)\r
 1. Create new genesis from scratch\r
 2. Import already existing genesis\r
> "
send -- "1"
send -- "\r"
expect "Which consensus engine to use? (default = clique)\r
 1. Ethash - proof-of-work\r
 2. Clique - proof-of-authority\r
> "
send -- "2"
send -- "\r"
expect "How many seconds should blocks take? (default = 15)\r
> "
send -- "5"
send -- "\r"
expect "Which accounts are allowed to seal? (mandatory at least one)\r
> 0x"
send -- "%%ACCT_ID%%\r"
send -- "\r"
expect "Which accounts should be pre-funded? (advisable at least one)\r
> 0x"
send -- "%%ACCT_ID%%\r"
send -- "\r"
expect "Should the precompile-addresses (0x1 .. 0xff) be pre-funded with 1 wei? (advisable yes)\r
> "
send -- "n"
send -- "o"
send -- "\r"
expect "Specify your chain/network ID if you want an explicit one (default = random)\r
> "
send -- "4"
send -- "3"
send -- "2"
send -- "1"
send -- "\r"
expect "What would you like to do? (default = stats)\r
 1. Show network stats\r
 2. Manage existing genesis\r
 3. Track new remote server\r
 4. Deploy network components\r
> "
send -- "2"
send -- "\r"
expect " 1. Modify existing configurations\r
 2. Export genesis configurations\r
 3. Remove genesis configuration\r
> "
send -- "2"
send -- "\r"
expect "> "
send -- "."
send -- "\r"
expect "What would you like to do? (default = stats)\r
 1. Show network stats\r
 2. Manage existing genesis\r
 3. Track new remote server\r
 4. Deploy network components\r
> "
send -- ""
send 
expect eof
